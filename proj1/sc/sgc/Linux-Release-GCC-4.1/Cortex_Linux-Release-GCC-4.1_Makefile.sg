# vim: ft=make
# Template for makefile generation.
# Copyright ARM Limited 2007-2011 All Rights Reserved.
#
# The Makefile generated from this template is designed to be invoke by simgen.
#

# Some targets are used for internal reasons and are therefore phony
# - scx        For collecting together SystemC export targets
# - clean      For cleaning the project
# - isim       Alias for isim_system
# - pre_comp   Alias for pre-compiled header target
# - post_build Post-build event target
.PHONY: scx clean pre_comp post_build

TOP_COMPONENT=Cortex
BUILD_DIR = ./Linux-Release-GCC-4.1/
OUT_DIR = gen
CONFIG = Linux-Release-GCC-4.1

# Dependencies are generated by the compiler, if they are present include them.
# GNU make 3.80 present on RHEL4 warns if an empty list of files is given to -include
# this is not useful as the biggest use for it is a lists of .d files which are
# generated by the build and won't exist on a fresh build. This is corrected in
# GNU make 3.81
-include WORKAROUND_FOR_MAKE_380_WARNING_EMPTY_FILES $(wildcard $(OUT_DIR)/*.d)

CXX = g++
AR  = ar
RANLIB = ranlib
CXXFLAGS_EXT = -pthread -march=pentium-m -mtune=nocona -mfpmath=sse -msse2 -O3 -fomit-frame-pointer -Wall -pipe -m32
CPPFLAGS_EXT = -Igen -I$(PVLIB_HOME)/include/fmruntime -I$(PVLIB_HOME)/include -I$(MAXCORE_HOME)/AMBA-PV/include -I$(PVLIB_HOME)/include/fmruntime/eslapi  -I../LISA/C/ -I $(SYSTEMC_HOME)/include -I $(TLM_HOME)/include/tlm -DSIMGEN_RELEASE=1 -DNDEBUG=1  -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE

CONFIGURATION=Linux-Release-GCC-4.1

LDLIBS = /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libarmctmodel.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/liblan91c111.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libcomponents.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libz.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libpvbus.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libfmruntime.a -ldl -lrt 
LDFLAGS = -pthread -Wl,--no-undefined -m32

APPLICATION=

# Objects used by all targets
COMMON_OBJECTS = gen/Comp_1.o gen/CADI_Ctors_DSO.o gen/Cortex_Utils.o

# Objects specific to classic SystemC export
SC_OBJECTS      = 

# Object which are not safe to link into a DSO used by SCX
NONDSO_OBJECTS  = gen/Comp_NonDSO.o gen/CADI_Ctors_NonDSO.o gen/scx_evs_Cortex.o

# Objects specific to MI SystemC export
SCX_OBJECTS     = gen/scx_ids.o gen/scx_report_handler.o gen/scx_simcontroller.o gen/scx_scheduler_mapping.o

# Objects specific to ISIM systems
ISIM_OBJECTS    = 

isim: isim_system

pre_comp: 

# pre-compile not enabled



post_build:
	

gen/Comp_1.o: gen/Comp_1.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -DSG_BUILDING_DSO_Cortex -MMD -c -o gen/Comp_1.o  gen/Comp_1.cpp

gen/CADI_Ctors_DSO.o: gen/CADI_Ctors_DSO.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -DSG_BUILDING_DSO_Cortex  -O0 -MMD -c -o gen/CADI_Ctors_DSO.o  gen/CADI_Ctors_DSO.cpp

gen/Cortex_Utils.o: gen/Cortex_Utils.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -DSG_BUILDING_DSO_Cortex -MMD -c -o gen/Cortex_Utils.o  gen/Cortex_Utils.cpp

gen/Comp_NonDSO.o: gen/Comp_NonDSO.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO.o  gen/Comp_NonDSO.cpp

gen/CADI_Ctors_NonDSO.o: gen/CADI_Ctors_NonDSO.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden  -O0 -MMD -c -o gen/CADI_Ctors_NonDSO.o  gen/CADI_Ctors_NonDSO.cpp

gen/scx_evs_Cortex.o: gen/scx_evs_Cortex.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_evs_Cortex.o  gen/scx_evs_Cortex.cpp

gen/scx_ids.o: gen/scx_ids.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_ids.o  gen/scx_ids.cpp

gen/scx_report_handler.o: gen/scx_report_handler.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_report_handler.o  gen/scx_report_handler.cpp

gen/scx_simcontroller.o: gen/scx_simcontroller.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_simcontroller.o  gen/scx_simcontroller.cpp

gen/scx_scheduler_mapping.o: gen/scx_scheduler_mapping.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_scheduler_mapping.o  gen/scx_scheduler_mapping.cpp



isim_system: $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(ISIM_OBJECTS) $(LDLIBS)
	$(CXX) -o $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(ISIM_OBJECTS) $(LDFLAGS) $(LDLIBS)

libisim_system.a: $(COMMON_OBJECTS) $(NONDSO_OBJECTS)
	rm -f $@
	$(AR) cru $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS)
	$(RANLIB) $@

cadi_system_$(CONFIG).so: $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(LDLIBS)
	$(CXX) -shared  -o $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(LDFLAGS) $(LDLIBS)  -Wl,--version-script=$(MAXCORE_HOME)/lib/version.expmap 

ifeq ($(LDLIBS),)
     AR_DIR=
else
     AR_DIR=__tmp__/*.*
endif

$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).a: $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS)
	rm -f $@
	mkdir -p __tmp__ 
	cd __tmp__  && files='/ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libarmctmodel.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/liblan91c111.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libcomponents.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libz.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libpvbus.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libfmruntime.a' ; \
	for file in $$files ; do \
	   file $$file | grep 'archive' > /dev/null; \
	   if [ $$? -eq 1 ]; then (`cp $$file .`)  else (ar x $$file) fi; \
	done
	$(AR) cru $@ $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS) $(AR_DIR)
	$(RANLIB) $@
	$(CXX) -shared -o $(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS) -m32 /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libarmctmodel.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/liblan91c111.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libcomponents.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libz.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libpvbus.a /ncsu/ds5-2013.06/FastModelsPortfolio_8.2/lib/Linux_GCC-4.1/libfmruntime.a
	rm -rf __tmp__ 
	cp $(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so ..

scx: libscx.a libscx-$(TOP_COMPONENT)-$(CONFIG).a lib$(TOP_COMPONENT)-$(CONFIG).so

libscx.a: $(SCX_OBJECTS)
	$(AR) cru $@ $(SCX_OBJECTS)

libscx-$(TOP_COMPONENT)-$(CONFIG).a: $(NONDSO_OBJECTS)
	$(AR) cru $@ $(NONDSO_OBJECTS)
	$(RANLIB) $@

lib$(TOP_COMPONENT)-$(CONFIG).so: $(COMMON_OBJECTS) $(LDLIBS)
	$(CXX) -shared -o $@ $(COMMON_OBJECTS) $(LDFLAGS) $(LDLIBS)

clean:
	rm -f $(COMMON_OBJECTS) \
	$(SC_OBJECTS) \
	$(NONDSO_OBJECTS) \
	$(SCX_OBJECTS) \
	$(ISIM_OBJECTS) \
	isim isim_system \
	cadi_system_$(CONFIG).so \
	$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).a \
	$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so \
	libscx.a \
	libscx-$(TOP_COMPONENT)-$(CONFIG).a \
	lib$(TOP_COMPONENT)-$(CONFIG).so
	rm -rf $(OUT_DIR)
	

