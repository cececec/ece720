armcc --cpu=cortex-m0 -c -o fibonacci.o fibonacci.c
armlink --cpu=cortex-m0 --ro-base=0x0 --info=totals --map --first='fibonacci.o(vectors)' -o fibonacci.elf fibonacci.o

==============================================================================

Memory Map of the image

  Image Entry point : 0x00000015

  Load Region LR_1 (Base: 0x00000000, Size: 0x00000408, Max: 0xffffffff, ABSOLUTE)

    Execution Region ER_RO (Base: 0x00000000, Size: 0x000003fc, Max: 0xffffffff, ABSOLUTE)

    Base Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000000   0x00000014   Data   RO            4    vectors             fibonacci.o
    0x00000014   0x00000008   Code   RO           41  * !!!main             c_p.l(__main.o)
    0x0000001c   0x0000003c   Code   RO          204    !!!scatter          c_p.l(__scatter.o)
    0x00000058   0x0000001c   Code   RO          206    !!handler_zi        c_p.l(__scatter_zi.o)
    0x00000074   0x00000002   Code   RO           40    .ARM.Collect$$_printf_percent$$00000000  c_p.l(_printf_percent.o)
    0x00000076   0x0000000a   Code   RO           39    .ARM.Collect$$_printf_percent$$00000009  c_p.l(_printf_d.o)
    0x00000080   0x00000004   Code   RO           50    .ARM.Collect$$_printf_percent$$00000017  c_p.l(_printf_percent_end.o)
    0x00000084   0x00000002   Code   RO           82    .ARM.Collect$$libinit$$00000000  c_p.l(libinit.o)
    0x00000086   0x00000004   Code   RO           89    .ARM.Collect$$libinit$$00000001  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO           93    .ARM.Collect$$libinit$$00000008  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO           95    .ARM.Collect$$libinit$$0000000A  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO           97    .ARM.Collect$$libinit$$0000000C  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          100    .ARM.Collect$$libinit$$0000000F  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          102    .ARM.Collect$$libinit$$00000011  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          104    .ARM.Collect$$libinit$$00000013  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          106    .ARM.Collect$$libinit$$00000015  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          108    .ARM.Collect$$libinit$$00000017  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          110    .ARM.Collect$$libinit$$00000019  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          112    .ARM.Collect$$libinit$$0000001B  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          114    .ARM.Collect$$libinit$$0000001D  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          116    .ARM.Collect$$libinit$$0000001F  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          118    .ARM.Collect$$libinit$$00000021  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          120    .ARM.Collect$$libinit$$00000023  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          124    .ARM.Collect$$libinit$$0000002A  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          126    .ARM.Collect$$libinit$$0000002C  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          128    .ARM.Collect$$libinit$$0000002E  c_p.l(libinit2.o)
    0x0000008a   0x00000000   Code   RO          130    .ARM.Collect$$libinit$$00000030  c_p.l(libinit2.o)
    0x0000008a   0x00000002   Code   RO          131    .ARM.Collect$$libinit$$00000031  c_p.l(libinit2.o)
    0x0000008c   0x00000002   Code   RO          149    .ARM.Collect$$libshutdown$$00000000  c_p.l(libshutdown.o)
    0x0000008e   0x00000000   Code   RO          160    .ARM.Collect$$libshutdown$$00000003  c_p.l(libshutdown2.o)
    0x0000008e   0x00000000   Code   RO          163    .ARM.Collect$$libshutdown$$00000006  c_p.l(libshutdown2.o)
    0x0000008e   0x00000000   Code   RO          166    .ARM.Collect$$libshutdown$$00000009  c_p.l(libshutdown2.o)
    0x0000008e   0x00000000   Code   RO          168    .ARM.Collect$$libshutdown$$0000000B  c_p.l(libshutdown2.o)
    0x0000008e   0x00000000   Code   RO          171    .ARM.Collect$$libshutdown$$0000000E  c_p.l(libshutdown2.o)
    0x0000008e   0x00000002   Code   RO          172    .ARM.Collect$$libshutdown$$0000000F  c_p.l(libshutdown2.o)
    0x00000090   0x00000000   Code   RO           45    .ARM.Collect$$rtentry$$00000000  c_p.l(rtentry.o)
    0x00000090   0x00000000   Code   RO           54    .ARM.Collect$$rtentry$$00000002  c_p.l(rtentry2.o)
    0x00000090   0x00000006   Code   RO           66    .ARM.Collect$$rtentry$$00000004  c_p.l(rtentry4.o)
    0x00000096   0x00000000   Code   RO           56    .ARM.Collect$$rtentry$$00000009  c_p.l(rtentry2.o)
    0x00000096   0x00000004   Code   RO           57    .ARM.Collect$$rtentry$$0000000A  c_p.l(rtentry2.o)
    0x0000009a   0x00000000   Code   RO           59    .ARM.Collect$$rtentry$$0000000C  c_p.l(rtentry2.o)
    0x0000009a   0x00000008   Code   RO           60    .ARM.Collect$$rtentry$$0000000D  c_p.l(rtentry2.o)
    0x000000a2   0x00000002   Code   RO           87    .ARM.Collect$$rtexit$$00000000  c_p.l(rtexit.o)
    0x000000a4   0x00000000   Code   RO          133    .ARM.Collect$$rtexit$$00000002  c_p.l(rtexit2.o)
    0x000000a4   0x00000004   Code   RO          134    .ARM.Collect$$rtexit$$00000003  c_p.l(rtexit2.o)
    0x000000a8   0x00000006   Code   RO          135    .ARM.Collect$$rtexit$$00000004  c_p.l(rtexit2.o)
    0x000000ae   0x00000002   PAD
    0x000000b0   0x000000bc   Code   RO            1    .text               fibonacci.o
    0x0000016c   0x00000002   Code   RO            8    .text               c_p.l(use_no_semi_2.o)
    0x0000016e   0x00000002   PAD
    0x00000170   0x0000001c   Code   RO           12    .text               c_p.l(noretval__2printf.o)
    0x0000018c   0x0000006c   Code   RO           14    .text               c_p.l(__printf.o)
    0x000001f8   0x0000006c   Code   RO           16    .text               c_p.l(_printf_dec.o)
    0x00000264   0x00000002   Code   RO           43    .text               c_p.l(use_no_semi.o)
    0x00000266   0x000000b0   Code   RO           46    .text               c_p.l(_printf_intcommon.o)
    0x00000316   0x00000002   PAD
    0x00000318   0x00000028   Code   RO           48    .text               c_p.l(_printf_char_file.o)
    0x00000340   0x00000028   Code   RO           51    .text               c_p.l(rtudiv10.o)
    0x00000368   0x00000030   Code   RO           68    .text               c_p.l(_printf_char_common.o)
    0x00000398   0x0000003e   Code   RO           70    .text               c_p.l(sys_stackheap_outer.o)
    0x000003d6   0x0000000c   Code   RO           75    .text               c_p.l(exit.o)
    0x000003e2   0x00000002   PAD
    0x000003e4   0x00000008   Code   RO           83    .text               c_p.l(libspace.o)
    0x000003ec   0x00000010   Data   RO          202    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Base: 0x000003fc, Size: 0x0000000c, Max: 0xffffffff, ABSOLUTE)

    Base Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x000003fc   0x0000000c   Data   RW            2    .data               fibonacci.o


    Execution Region ER_ZI (Base: 0x00000408, Size: 0x00000060, Max: 0xffffffff, ABSOLUTE)

    Base Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000408   0x00000060   Zero   RW           84    .bss                c_p.l(libspace.o)


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

       188         56         36         12          0        400   Object Totals
         0          0         16          0          0          0   (incl. Generated)
         0          0          0          0          0          0   (incl. Padding)
       796         48          0          0         96        956   Library Totals
         8          0          0          0          0          0   (incl. Padding)

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

       984        104         36         12         96        796   Grand Totals
       984        104         36         12         96        796   ELF Image Totals
       984        104         36         12          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                 1020 (   1.00kB)
    Total RW  Size (RW Data + ZI Data)               108 (   0.11kB)
    Total ROM Size (Code + RO Data + RW Data)       1032 (   1.01kB)

==============================================================================

fromelf --bin --output ram.bin fibonacci.elf
vlib work
vlog ../src/rtl/cortexm0ds_logic.v ../src/rtl/CORTEXM0DS.v cortexm0ds_tb.v
QuestaSim vlog 10.2b_1 Compiler 2013.06 Jun  7 2013
-- Compiling module cortexm0ds_logic
-- Compiling module CORTEXM0DS
-- Compiling module cortexm0ds_tb

Top level modules:
	cortexm0ds_tb
vopt cortexm0ds_tb -o cortexm0ds_tb_opt
QuestaSim vopt 10.2b_1 Compiler 2013.06 Jun  7 2013

Top level modules:
	cortexm0ds_tb

Analyzing design...
-- Loading module cortexm0ds_tb
-- Loading module CORTEXM0DS
-- Loading module cortexm0ds_logic
Optimizing 3 design-units (inlining 2 instances):
-- Inlining module cortexm0ds_logic(fast)
-- Inlining module CORTEXM0DS(fast)
-- Optimizing module cortexm0ds_tb(fast)
Optimized design name is cortexm0ds_tb_opt
vsim cortexm0ds_tb_opt -c -do "run -all"
Reading /mtitcl/vsim/pref.tcl 

# 10.2b_1

# vsim -do {run -all} -c cortexm0ds_tb_opt 
# //  Questa Sim
# //  Version 10.2b_1 linux Jun  7 2013
# //
# //  Copyright 1991-2013 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //
# Loading work.cortexm0ds_tb(fast)
# run -all 
#                    0: ----------------------------------------------
#                    0: ARM(r) Cortex(tm)-M0 DesignStart(tm) Testbench
#                    0: (c) Copyright 2010 ARM Limited
#                    0: All Rights Reserved
#                    0: ----------------------------------------------
# 
#                    0: Loading initial memory content...
#                    0: ...complete
# 
#                 1150: Simulation leaving reset
# starting...
# fib(0) = 0
# fib(1) = 1
# fib(2) = 1
# fib(3) = 2
# fib(4) = 3
# fib(5) = 5
# finishing...
#               943950: Simulation stop requested by CPU
# 
# ** Note: Data structure takes 7134884 bytes of memory
#          Process time 0.80 seconds
#          $finish    : cortexm0ds_tb.v(240)
#    Time: 943950 ns  Iteration: 1  Instance: /cortexm0ds_tb
rm fibonacci.o
